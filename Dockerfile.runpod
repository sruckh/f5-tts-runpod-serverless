# F5-TTS RunPod Serverless - Network Volume Virtual Environment Architecture
# ============================================================================
# 
# NEW APPROACH: Use /runpod-volume for ALL Python dependencies
# - Container: Minimal Python + system essentials only
# - Network Volume: Virtual environment with ALL packages
# - Benefits: 50GB+ space available vs 8GB container limit
#
FROM python:3.10-slim

# Install only essential system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy application code and setup script
COPY runpod-handler.py /app/
COPY s3_utils.py /app/
COPY setup_network_venv.py /app/

# Make setup script executable
RUN chmod +x /app/setup_network_venv.py

# Set environment to use network volume virtual environment
ENV PYTHONPATH="/runpod-volume/venv/lib/python3.10/site-packages"
ENV PATH="/runpod-volume/venv/bin:$PATH"
ENV VIRTUAL_ENV="/runpod-volume/venv"

# Set cache and model directories to network volume
ENV HF_HOME="/runpod-volume/models"
ENV TRANSFORMERS_CACHE="/runpod-volume/models"
ENV HF_HUB_CACHE="/runpod-volume/models/hub"
ENV TORCH_HOME="/runpod-volume/models/torch"
ENV PIP_CACHE_DIR="/runpod-volume/cache/pip"

# Minimal optimizations
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV HF_HUB_DISABLE_PROGRESS_BARS=1

# Create startup script that sets up venv then runs handler
RUN echo '#!/bin/bash
\
echo "🚀 Starting F5-TTS with Network Volume Virtual Environment"
\
python /app/setup_network_venv.py
\
if [ $? -eq 0 ]; then
\
    echo "✅ Virtual environment ready, starting handler..."
\
    /runpod-volume/venv/bin/python /app/runpod-handler.py
\
else
\
    echo "❌ Virtual environment setup failed"
\
    exit 1
\
fi' > /app/start.sh && chmod +x /app/start.sh

# Use the startup script
CMD ["/app/start.sh"]