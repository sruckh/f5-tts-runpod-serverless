# F5-TTS RunPod Serverless - Network Volume Virtual Environment Architecture
# ============================================================================
# 
# NEW APPROACH: Use /runpod-volume for ALL Python dependencies
# - Container: Minimal Python + system essentials only
# - Network Volume: Virtual environment with ALL packages
# - Benefits: 50GB+ space available vs 8GB container limit
#
FROM python:3.10-slim

# Install only essential system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy application code and setup script
COPY runpod-handler.py /app/
COPY s3_utils.py /app/
COPY setup_network_venv.py /app/

# Make setup script executable
RUN chmod +x /app/setup_network_venv.py

# Set environment to use network volume virtual environment
ENV PYTHONPATH="/runpod-volume/venv/lib/python3.10/site-packages"
ENV PATH="/runpod-volume/venv/bin:$PATH"
ENV VIRTUAL_ENV="/runpod-volume/venv"

# Set cache and model directories to network volume
ENV HF_HOME="/runpod-volume/models"
ENV TRANSFORMERS_CACHE="/runpod-volume/models"
ENV HF_HUB_CACHE="/runpod-volume/models/hub"
ENV TORCH_HOME="/runpod-volume/models/torch"
ENV PIP_CACHE_DIR="/runpod-volume/cache/pip"

# Minimal optimizations
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV HF_HUB_DISABLE_PROGRESS_BARS=1

# Create startup script that sets up venv then runs handler
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'set -e  # Exit on any error' >> /app/start.sh && \
    echo 'echo \"🚀 Starting F5-TTS with Network Volume Virtual Environment\"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Check if network volume is available' >> /app/start.sh && \
    echo 'if [ ! -d \"/runpod-volume\" ]; then' >> /app/start.sh && \
    echo '    echo \"❌ Network volume not available at /runpod-volume\"' >> /app/start.sh && \
    echo '    echo \"This container requires RunPod network volume storage\"' >> /app/start.sh && \
    echo '    exit 1' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Setup virtual environment' >> /app/start.sh && \
    echo 'echo \"🔧 Setting up network volume virtual environment...\"' >> /app/start.sh && \
    echo 'echo "📋 Debug: About to run setup_network_venv.py"' >> /app/start.sh && \
    echo 'echo "📍 Python version: $(python3 --version)"' >> /app/start.sh && \
    echo 'echo "📋 Current directory: $(pwd)"' >> /app/start.sh && \
    echo 'echo "📋 Available disk space:"' >> /app/start.sh && \
    echo 'df -h /runpod-volume 2>/dev/null || echo "Network volume not mounted"' >> /app/start.sh && \
    echo 'python3 /app/setup_network_venv.py' && \
    echo '' >> /app/start.sh && \
    echo 'if [ $? -eq 0 ]; then' >> /app/start.sh && \
    echo '    echo \"✅ Virtual environment ready, starting handler...\"' >> /app/start.sh && \
    echo '    echo \"📍 Using Python: /runpod-volume/venv/bin/python\"' >> /app/start.sh && \
    echo '    echo \"🎯 Starting RunPod serverless handler with lazy model loading...\"' >> /app/start.sh && \
    echo '    exec /runpod-volume/venv/bin/python /app/runpod-handler.py' >> /app/start.sh && \
    echo 'else' >> /app/start.sh && \
    echo '    echo "❌ Virtual environment setup failed"' >> /app/start.sh && \
    echo '    echo "💡 Check RunPod logs for setup errors"' >> /app/start.sh && \
    echo '    echo "🔍 Debug info:"' >> /app/start.sh && \
    echo '    echo "  - Network volume: $(ls -la /runpod-volume 2>/dev/null || echo 'not accessible')"' >> /app/start.sh && \
    echo '    echo "  - Free space: $(df -h /runpod-volume 2>/dev/null || echo 'cannot check')"' >> /app/start.sh && \
    echo '    echo "  - Python: $(which python3)"' >> /app/start.sh && \
    echo '    exit 1' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    chmod +x /app/start.sh

# Use the startup script
CMD ["/app/start.sh"]